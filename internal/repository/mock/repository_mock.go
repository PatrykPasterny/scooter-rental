// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/NordSecurity-Interviews/BE-PatrykPasterny/internal/service/rental/model"
	model0 "github.com/NordSecurity-Interviews/BE-PatrykPasterny/internal/service/tracker/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockScooterRepository is a mock of ScooterRepository interface.
type MockScooterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScooterRepositoryMockRecorder
}

// MockScooterRepositoryMockRecorder is the mock recorder for MockScooterRepository.
type MockScooterRepositoryMockRecorder struct {
	mock *MockScooterRepository
}

// NewMockScooterRepository creates a new mock instance.
func NewMockScooterRepository(ctrl *gomock.Controller) *MockScooterRepository {
	mock := &MockScooterRepository{ctrl: ctrl}
	mock.recorder = &MockScooterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScooterRepository) EXPECT() *MockScooterRepositoryMockRecorder {
	return m.recorder
}

// GetScooters mocks base method.
func (m *MockScooterRepository) GetScooters(ctx context.Context, geoRectangle *model.GeoRectangle) ([]*model.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooters", ctx, geoRectangle)
	ret0, _ := ret[0].([]*model.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooters indicates an expected call of GetScooters.
func (mr *MockScooterRepositoryMockRecorder) GetScooters(ctx, geoRectangle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooters", reflect.TypeOf((*MockScooterRepository)(nil).GetScooters), ctx, geoRectangle)
}

// UpdateScooterAvailability mocks base method.
func (m *MockScooterRepository) UpdateScooterAvailability(ctx context.Context, scooterUUID uuid.UUID, availability bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterAvailability", ctx, scooterUUID, availability)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterAvailability indicates an expected call of UpdateScooterAvailability.
func (mr *MockScooterRepositoryMockRecorder) UpdateScooterAvailability(ctx, scooterUUID, availability interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterAvailability", reflect.TypeOf((*MockScooterRepository)(nil).UpdateScooterAvailability), ctx, scooterUUID, availability)
}

// UpdateScooterLocation mocks base method.
func (m *MockScooterRepository) UpdateScooterLocation(ctx context.Context, scooter *model0.Scooter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScooterLocation", ctx, scooter)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScooterLocation indicates an expected call of UpdateScooterLocation.
func (mr *MockScooterRepositoryMockRecorder) UpdateScooterLocation(ctx, scooter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScooterLocation", reflect.TypeOf((*MockScooterRepository)(nil).UpdateScooterLocation), ctx, scooter)
}
