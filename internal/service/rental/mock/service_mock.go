// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/NordSecurity-Interviews/BE-PatrykPasterny/internal/service/rental/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRentalService is a mock of RentalService interface.
type MockRentalService struct {
	ctrl     *gomock.Controller
	recorder *MockRentalServiceMockRecorder
}

// MockRentalServiceMockRecorder is the mock recorder for MockRentalService.
type MockRentalServiceMockRecorder struct {
	mock *MockRentalService
}

// NewMockRentalService creates a new mock instance.
func NewMockRentalService(ctrl *gomock.Controller) *MockRentalService {
	mock := &MockRentalService{ctrl: ctrl}
	mock.recorder = &MockRentalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRentalService) EXPECT() *MockRentalServiceMockRecorder {
	return m.recorder
}

// Free mocks base method.
func (m *MockRentalService) Free(ctx context.Context, scooterUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free", ctx, scooterUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free.
func (mr *MockRentalServiceMockRecorder) Free(ctx, scooterUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockRentalService)(nil).Free), ctx, scooterUUID)
}

// GetScooters mocks base method.
func (m *MockRentalService) GetScooters(ctx context.Context, rectangle *model.GeoRectangle) ([]*model.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooters", ctx, rectangle)
	ret0, _ := ret[0].([]*model.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooters indicates an expected call of GetScooters.
func (mr *MockRentalServiceMockRecorder) GetScooters(ctx, rectangle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooters", reflect.TypeOf((*MockRentalService)(nil).GetScooters), ctx, rectangle)
}

// Rent mocks base method.
func (m *MockRentalService) Rent(ctx context.Context, info *model.RentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rent", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rent indicates an expected call of Rent.
func (mr *MockRentalServiceMockRecorder) Rent(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rent", reflect.TypeOf((*MockRentalService)(nil).Rent), ctx, info)
}
