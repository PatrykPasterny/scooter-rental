// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/PatrykPasterny/scooter-rental/internal/service/tracker/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// StopTracking mocks base method.
func (m *MockService) StopTracking(userUUID, scooterUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTracking", userUUID, scooterUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopTracking indicates an expected call of StopTracking.
func (mr *MockServiceMockRecorder) StopTracking(userUUID, scooterUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTracking", reflect.TypeOf((*MockService)(nil).StopTracking), userUUID, scooterUUID)
}

// Track mocks base method.
func (m *MockService) Track(userUUID uuid.UUID, scooter *model.Scooter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", userUUID, scooter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Track indicates an expected call of Track.
func (mr *MockServiceMockRecorder) Track(userUUID, scooter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockService)(nil).Track), userUUID, scooter)
}
